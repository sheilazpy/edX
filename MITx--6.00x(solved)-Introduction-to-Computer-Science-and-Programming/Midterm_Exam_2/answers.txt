    PROBLEM 1 : 10.0 POINTS
    1.A good hash function should generate a Gaussian distribution.
    False
    2.The class object is a subclass of the class list.
    False
    3.A deterministic program always returns the same result for the same input.
    True
    4.The coefficient of variation is better than the standard deviation for comparing the variation in the number of residents of different cities or towns to the variation in the number of residents in different countries.
    True
    5.Monte Carlo simulations can only be used to solve stochastic problems.
    False
 
    PROBLEM 2 : 10.0 POINTS
     
    1.Generator
            i. Iteration
    2.Exception
            j.Flow of Control
    3.Gaussian Distribution
            c.Normal Distribution
    4.Linear Regression
            b.Exponential Distribution
    5.Attribute Reference
            k.Class
 
    PROBLEM 3-1 : 4.0 POINTS
    1.The values in xVals are:
            Exponentially distributed
    2.The values in tVals are:
            Distributed with a Gaussian distribution
     
    PROBLEM 3-2 : 10.0 POINTS
    1.pylab.plot(xVals, yVals)
            Graph 4
    2.pylab.plot(xVals, zVals)
            Graph 5
    3.pylab.plot(sorted(xVals), yVals)
            Graph 2
    4.pylab.plot(xVals, sorted(yVals)
            Graph 3
    5.pylab.plot(sorted(xVals), sorted(yVals))
            Graph 1
 
    PROBLEM 4-1 : 4.0 POINTS
    1.p2 < p3
            True
    2.p2.getIdNum() < p3.getIdNum()
            True
    3.p2.name < p3.name
            False
    4.p4 < p3
            True
    5.p4 < p5
            False
    6.p1.isStudent()
            False
    7.p3.isStudent()
            True
    8.p5.isStudent()
            True
    9.p.isStudent()
            exception
     
    PROBLEM 4-2 : 6.0 POINTS
     
    class edXPerson(Person):
        nextIdNum = 0
        def __init__(self, name):
            Person.__init__(self, name)
            self.idNum = edXPerson.nextIdNum
            edXPerson.nextIdNum += 1
        def getIdNum(self):
            return self.idNum
        def __lt__(self, other):
            if self.idNum == other.idNum:
                return self.name < other.name
            else:
                return self.idNum < other.idNum
        def isStudent(self):
            return isinstance(self, Student)
     
    PROBLEM 4-3 : 6.0 POINTS ******May Be Wrong********
     
    class Subject(object):
        def __init__(self):
            self.students = []
     
        def addStudent(self, student):
            if student in self.students:
                raise ValueError('Duplicate student')
            self.students.append(student)
     
        def allStudents(self):
            self.temp_students = self.students[:]
            self.temp_students.sort()
            for s in self.temp_students:
                yield s
     
        def __str__(self):
            return 'Subject with ' + str(len(self.students)) + ' students.'
 
    PROBLEM 5 : 4.0 POINTS
     
    0 2.0 4.0 8.0
    PROBLEM 6 : 10.0 POINTS
     
    Graph 1
            Photo Drunk    
    Graph 2
            UsualDrunk
    Graph 3
            EDrunk
    Graph 4
            Cold Drunk
    Graph 5
            DDrunk
    PROBLEM 7-1 : 10.0 POINTS
     
    def sampleQuizzes():
        ok = 0.0
        for i in range(10000):
            m1 = random.randrange(50,81)
            m2 = random.randrange(60,91)
            fe = random.randrange(55,96)
            fg = m1*0.25 + m2*0.25 + fe*0.50
            if fg >= 70 and fg <= 75:
                ok += 1.0
           
        return ok/10000
     
    PROBLEM 7-2 : 10.0 POINTS
     
    def plotQuizzes():
        scores = generateScores(10000)
        pylab.hist(scores,bins = 7)
        pylab.title('Distribution of Scores')
        pylab.xlabel('Final Score')
        pylab.ylabel('Number of Trials')
        pylab.show()
 
PROBLEM 8-1 : 4.0 POINTS
 
5/36
25/216
 
PROBLEM 8-2 : 8.0 POINTS
 
def probTest(limit):
    prob = 1.0
    n = 1
    while prob > limit:
        prob = (5.0/6)**(n-1)*1/6.0
        n += 1        
    return n-1
create a new version of this paste